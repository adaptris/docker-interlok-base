plugins {
  id "distribution"
}

ext {
  interlokCoreVersion = project.findProperty('interlokCoreVersion') ?: '3.11.0-RELEASE'
  interlokWarVersion = project.findProperty('interlokWarVersion') ?: interlokCoreVersion
  nexusBaseUrl = project.findProperty('nexusBaseUrl') ?: 'https://nexus.adaptris.net/nexus'
  interlokInstallDirectory = project.findProperty('interlokInstallDirectory') ?:  "/opt/interlok"

  log4j2Version = '2.13.3'
  slf4jVersion = '1.7.30'
}

distTar.enabled=false
distZip.enabled=true

repositories {
  mavenCentral() {
    content {
      excludeGroupByRegex "com\\.adaptris.*"
    }
  }
  maven { url "$nexusBaseUrl/content/groups/public" }
  maven { url "$nexusBaseUrl/content/groups/interlok" }
}


configurations() {
  interlokRuntime{}
  interlokJavaDocs{}
  interlokWar{}
  all*.exclude group: 'c3p0'
  all*.exclude group: 'commons-logging'
  all*.exclude group: 'javamail'
  all*.exclude group: 'javax.mail', module: 'mail'
  all*.exclude group: 'org.glassfish.hk2.external'
  all*.exclude group: 'xalan', module: 'xalan'
  all*.exclude group: 'net.sf.saxon', module: 'saxon'
  all*.exclude group: 'org.codehaus.woodstox'
  all*.exclude group: 'org.eclipse.jetty.orbit', module: 'javax.mail.glassfish'
  all*.exclude group: 'com.vaadin.external.google', module: 'android-json'
  all*.exclude group: 'javax.el', module: 'javax.el-api'
  all*.exclude group: 'org.hibernate', module: 'hibernate-validator'
  // INTERLOK-3197 exclude old javax.mail
  all*.exclude group: 'com.sun.mail', module: 'javax.mail'
  all*.exclude group: 'javax.validation', module: 'validation-api'
  all*.exclude group: 'javax.activation', module: 'activation'
  all*.exclude group: 'javax.activation', module: 'javax.activation-api'
}

configurations.all {
  resolutionStrategy.cacheChangingModulesFor 15, "minutes"
}

dependencies {
  interlokRuntime ("com.adaptris:interlok-core-apt:$interlokCoreVersion") { changing=true }
  interlokRuntime ("com.adaptris:interlok-boot:$interlokCoreVersion") { changing=true }
  interlokRuntime ("com.adaptris:interlok-common:$interlokCoreVersion") { changing=true }
  interlokRuntime ("com.adaptris:interlok-logging:$interlokCoreVersion") { changing=true }
  interlokRuntime ("com.adaptris:interlok-licensing:$interlokCoreVersion") { changing=true }
  interlokRuntime ("com.adaptris:interlok-core:$interlokCoreVersion") { changing=true }

  interlokRuntime ("org.slf4j:slf4j-api:$slf4jVersion")
  interlokRuntime ("org.slf4j:jcl-over-slf4j:$slf4jVersion")
  interlokRuntime ("org.slf4j:jul-to-slf4j:$slf4jVersion")
  interlokRuntime ("org.apache.logging.log4j:log4j-core:$log4j2Version")
  interlokRuntime ("org.apache.logging.log4j:log4j-1.2-api:$log4j2Version")
  interlokRuntime ("org.apache.logging.log4j:log4j-slf4j-impl:${log4j2Version}")
  interlokRuntime ("org.apache.logging.log4j:log4j-api:$log4j2Version")
  interlokRuntime ("com.sun.mail:jakarta.mail:1.6.5")
  interlokRuntime ("com.sun.activation:jakarta.activation:1.2.2")
  interlokRuntime ("jakarta.validation:jakarta.validation-api:2.0.2")

  interlokJavaDocs group: "com.adaptris", name: "interlok-core", version: "$interlokCoreVersion", changing: true, classifier: "javadoc", transitive: false
  interlokJavaDocs group: "com.adaptris", name: "interlok-common", version: "$interlokCoreVersion", changing: true, classifier: "javadoc", transitive: false
  interlokWar group: "com.adaptris.ui", name: "interlok", version: "$interlokWarVersion", ext: "war", changing: true
}

distributions {
  main {
    contents {
      into('lib') {
        from(project.configurations.interlokRuntime)
      }
      into('webapps') {
        from(project.configurations.interlokWar)
      }
      into('docs/javadocs') {
        from(project.configurations.interlokJavaDocs)
      }
      rename '(.*)-[0-9]+\\..*.jar', '$1.jar'
      rename '(.*)-[0-9]+\\..*.war', '$1.war'
    }
  }
}


installDist {
  destinationDir = new File(interlokInstallDirectory)
  preserve {
    include '**/**'
  }
}
